import random

"""Module Poisson.

Ce module utilise la biblioth√®que `random` pour introduire des √©l√©ments de hasard dans 
la simulation des poissons. Cela inclut des fonctionnalit√©s telles que le d√©placement 
al√©atoire des poissons et la s√©lection al√©atoire de cases voisines.
"""

class Poisson:

    """Repr√©sente un poisson dans la simulation.

    Cette classe g√®re les propri√©t√©s et comportements d'un poisson, y compris sa position 
    dans la grille, son temps de reproduction, et ses interactions avec d'autres poissons.

    Attributs:
        emplacement_x (int): La position x du poisson dans la grille.
        emplacement_y (int): La position y du poisson dans la grille.
        temps_reproduction_poisson (int): Le temps n√©cessaire pour que le poisson se reproduise.
        temps_reproduction (int): Le temps √©coul√© depuis la derni√®re reproduction.
        ancien_emplacement (list): La derni√®re position du poisson avant son d√©placement.
    """

    def __init__(self, x : int, y : int, temps_reproduction_poisson : int) -> None:

        """Initialise une instance de la classe Poisson.

        Cette m√©thode d√©finit la position initiale du poisson dans la grille ainsi que 
        son temps de reproduction. Elle initialise √©galement le temps de reproduction √©coul√© 
        √† z√©ro et enregistre l'ancien emplacement du poisson.

        Args:
            x (int): La position x initiale du poisson dans la grille.
            y (int): La position y initiale du poisson dans la grille.
            temps_reproduction_poisson (int): Le temps n√©cessaire pour que le poisson se reproduise.
        """

        self.emplacement_x = x  # Position x du poisson dans la grille
        self.emplacement_y = y  # Position y du poisson dans la grille
        self.temps_reproduction_poisson = temps_reproduction_poisson # Temps n√©cessaire pour la reproduction
        self.temps_reproduction = 0  # Temps √©coul√© depuis la derni√®re reproduction
        self.ancien_emplacement = [self.emplacement_x, self.emplacement_y]  # Derni√®re position avant d√©placement

    def cases_voisines(self, largeur : int, hauteur : int) -> list[tuple]:

        """Renvoie les coordonn√©es des cases voisines du poisson.

        Cette m√©thode calcule les positions adjacentes du poisson en tenant compte des 
        limites de la grille, en utilisant un mouvement toroidal pour g√©rer les bords.

        Args:
            largeur (int): La largeur de la grille.
            hauteur (int): La hauteur de la grille.

        Returns:
            list[tuple]: Une liste de tuples repr√©sentant les coordonn√©es des cases voisines.
        """
       
        return [
            (mouvement_thoroidal(self.emplacement_x + 1, largeur), self.emplacement_y), # Case √† droite
            (mouvement_thoroidal(self.emplacement_x - 1, largeur), self.emplacement_y), # Case √† gauche
            (self.emplacement_x, mouvement_thoroidal(self.emplacement_y + 1, hauteur)), # Case en bas
            (self.emplacement_x, mouvement_thoroidal(self.emplacement_y - 1, hauteur))  # Case en haut
        ]


    def deplacement(self, liste_animaux : list["Poisson"], largeur : int, hauteur : int) -> None :

        """D√©place le poisson vers une case voisine.

        Cette m√©thode choisit al√©atoirement une case voisine non occup√©e par un autre poisson 
        et d√©place le poisson √† cette position. Elle met √©galement √† jour l'ancien emplacement 
        du poisson et incr√©mente le temps de reproduction.

        Args:
            liste_animaux (list): Une liste d'objets de type "Poisson" pour v√©rifier les 
            positions occup√©es.
            largeur (int): La largeur de la grille.
            hauteur (int): La hauteur de la grille.

        Returns:
            None
        """
        
        # Stocke la position actuelle comme ancien emplacement pour l'utiliser dans la reproduction
        self.ancien_emplacement = [self.emplacement_x, self.emplacement_y]
        cases_voisines = self.cases_voisines(largeur, hauteur) # R√©cup√®re les cases voisines
        coordonnes_animaux = [] # Initialise une liste pour les coordonn√©es des autres poissons
        for animal in liste_animaux: # Parcourt la liste des animaux
            coordonnes_animaux.append((animal.emplacement_x, animal.emplacement_y)) # Ajoute leurs coordonn√©es

        for _ in range(len(cases_voisines)): # Essaye de trouver une case voisine libre
            case_choisie = random.choice(cases_voisines) # Choisit une case voisine al√©atoire
            if case_choisie not in coordonnes_animaux : # V√©rifie si la case est libre
                self.emplacement_x = case_choisie[0] # D√©place le poisson
                self.emplacement_y = case_choisie[1]
                break  # Sort de la boucle apr√®s le d√©placement
            else : 
                cases_voisines.remove(case_choisie) # Retire la case choisie si occup√©e
                
        self.temps_reproduction += 1  # Incr√©mente le temps de reproduction

    def reproduction(self, liste_animaux : list["Poisson"]) -> bool :

        """G√®re le processus de reproduction du poisson.

        Cette m√©thode v√©rifie si le poisson a atteint le cycle de reproduction et si son 
        emplacement a chang√©. Si les conditions sont remplies, elle cr√©e un nouveau poisson 
        √† l'ancien emplacement et l'ajoute √† la liste des animaux.

        Args:
            liste_animaux (list): Une liste d'objets de type "Poisson" pour ajouter le 
            nouveau poisson.

        Returns:
            bool: True si la reproduction a eu lieu, sinon False.
        """
        
        # V√©rifie si le cycle de reproduction est atteint et si l'ancien emplacement est diff√©rent
        if self.temps_reproduction >= self.temps_reproduction_poisson and \
           [self.emplacement_x, self.emplacement_y] != self.ancien_emplacement:
            
            # Coordonn√©es de l'ancien emplacement pour le nouveau poisson
            nouveau_x, nouveau_y = self.ancien_emplacement
            
            # Cr√©e un nouveau poisson avec les m√™mes param√®tres de reproduction
            nouveau_poisson = Poisson(nouveau_x, nouveau_y, self.temps_reproduction_poisson)
            
            liste_animaux.append(nouveau_poisson) # Ajoute le nouveau poisson √† la liste
            
            self.temps_reproduction = 0 # R√©initialise le temps de reproduction
            return True # Indique que la reproduction a eu lieu
        return False # Indique que la reproduction n'a pas eu lieu


    def __str__(self):

        """Renvoie une repr√©sentation sous forme de cha√Æne du poisson.

        Cette m√©thode retourne un symbole repr√©sentant le poisson pour l'affichage, 
        facilitant ainsi la visualisation de l'entit√© dans la grille.

        Returns:
            str: Une cha√Æne repr√©sentant le poisson.
        """
       
        return " üêü " # Repr√©sentation visuelle du poisson


# autres Fonction
def mouvement_thoroidal(coord : int, longueur : int) -> int:

    """Applique un mouvement toroidal √† une coordonn√©e.

    Cette fonction ajuste une coordonn√©e pour qu'elle reste dans les limites d'une grille 
    en utilisant un mouvement toroidal. Si la coordonn√©e d√©passe la longueur, elle est 
    ramen√©e √† z√©ro, et si elle est inf√©rieure √† z√©ro, elle est ajust√©e √† la derni√®re 
    position valide.

    Args:
        coord (int): La coordonn√©e √† ajuster.
        longueur (int): La longueur de la grille.

    Returns:
        int: La coordonn√©e ajust√©e dans les limites de la grille.
    """
   
    if coord == longueur:  
        return 0 # Retourne √† la premi√®re position si d√©passe la longueur
    elif coord == -1:  
        return longueur - 1 # Ajuste √† la derni√®re position valide si en dessous de z√©ro
    return coord # Retourne la coordonn√©e inchang√©e si elle est dans les limites
