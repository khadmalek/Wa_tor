from Poisson import Poisson
import random
import configparser

"""Module Requin.

Ce module importe la classe `Poisson` pour g√©rer les interactions entre les requins et 
les poissons dans la simulation. Il utilise √©galement les biblioth√®ques `random` pour 
introduire des √©l√©ments de hasard et `configparser` pour g√©rer la configuration de 
la simulation √† partir de fichiers de configuration.
"""


class Requin(Poisson):
    """
    Classe repr√©sentant un requin, h√©ritant de la classe Poisson.

    Cette classe mod√©lise le comportement d'un requin dans un environnement aquatique, y compris ses d√©placements, sa reproduction, sa capacit√© √† manger des poissons, et sa gestion de l'√©nergie. Elle inclut des m√©thodes pour g√©rer ces comportements ainsi que des attributs pour suivre l'√©tat du requin.

    Attributes:
        temps_reproduction_requin (int): Le temps n√©cessaire pour que le requin se reproduise.
        energie (int): Le niveau d'√©nergie actuel du requin.
        chronons_reproduction (int): Compteur de temps de reproduction.
        ancien_emplacement (list): Enregistrement de l'ancien emplacement du requin.
    """

    
    def __init__(self, x: int, y: int, temps_reproduction_requin: int, energie: int):
        """
        Initialise une instance de Requin avec sa position, son temps de reproduction et son niveau d'√©nergie.

        Ce constructeur d√©finit l'√©tat initial du Requin, y compris ses coordonn√©es, le temps de reproduction, l'√©nergie actuelle et un compteur pour le temps de reproduction. Il enregistre √©galement l'emplacement pr√©c√©dent du Requin.

        Args:
        x (int): La coordonn√©e x de la position du Requin.
        y (int): La coordonn√©e y de la position du Requin.
        temps_reproduction_requin (int): Le temps n√©cessaire pour que le Requin se reproduise.
        energie (int): Le niveau d'√©nergie actuel du Requin.
        """
        # Appel du constructeur de la classe parente
        super().__init__(x, y, temps_reproduction_requin) # Initialise la classe Poisson
        self.temps_reproduction_requin = temps_reproduction_requin  # Temps n√©cessaire pour se reproduire
        self.energie = energie  # √ânergie actuelle du requin
        self.chronons_reproduction = 0  # Compteur de temps de reproduction
        self.ancien_emplacement = [self.emplacement_x, self.emplacement_y]  # Enregistrement de l'ancien emplacement

    
    def deplacement(self, liste_animaux: list ["Requin", "Poisson"], largeur: int, hauteur: int) -> bool :
        """
        D√©place le requin dans l'environnement en fonction de la "r√©sence de poissons et d'autres requins.

        Cette m√©thode r√©duit l'√©nergie du requin √† chaque d√©placement et met √† jour sa position en fonction de la pr√©sence de poissons adjacents. Si des poissons sont pr√©sents, le requin se d√©place vers l'un d'eux et le mange ; sinon, il se d√©place vers une case vide. Le compteur de reproduction est √©galement incr√©ment√© √† chaque d√©placement.

        Args:
        liste_animaux (list): La liste des animaux pr√©sents dans l'environnement.
        largeur (int): La largeur de l'environnement.
        hauteur (int): La hauteur de l'environnement.
        """
        # R√©duit l'√©nergie √† chaque d√©placement
        self.energie -= 1
        # Incr√©menter le nombre de chronons de reproduction √† chaque d√©placement
        self.chronons_reproduction += 1
        self.ancien_emplacement = [self.emplacement_x, self.emplacement_y] # Enregistre l'ancien emplacement
        
        # Recherche des poissons adjacents
        voisins = self.cases_voisines(largeur, hauteur) # R√©cup√®re les cases voisines
        poissons_adjacents = [] # Liste pour stocker les poissons adjacents
        requins_adjacents = [] # Liste pour stocker les requins adjacents

        # Identification des poissons et requins adjacents
        for animal in liste_animaux: 
            if (animal.emplacement_x, animal.emplacement_y) in voisins and isinstance(animal, Poisson) and not isinstance(animal, Requin): 
                poissons_adjacents.append(animal) # Ajoute le poisson √† la liste
            if (animal.emplacement_x, animal.emplacement_y) in voisins and isinstance(animal, Requin) and not isinstance(animal, Poisson):
                requins_adjacents.append((animal.emplacement_x, animal.emplacement_y)) # Ajoute le requin √† la liste
        
        # D√©placement vers un poisson si pr√©sent
        if poissons_adjacents:
            poisson_a_miam = random.choice(poissons_adjacents) # Choisit un poisson au hasard
            # Met √† jour les coordonn√©es du requin dans la grille
            self.emplacement_x, self.emplacement_y = poisson_a_miam.emplacement_x, poisson_a_miam.emplacement_y
            # Manger le poisson
            return self.manger_poisson(poisson_a_miam, liste_animaux) # G√®re la consommation du poisson
                

        # D√©placement vers une case vide sinon
        else: 
            cases_vides = [] # Liste pour les cases vides
            for voisin in voisins: 
                if voisin not in requins_adjacents: # √âvite de choisir une case occup√©e par un requin
                    cases_vides.append(voisin) # Ajoute la case vide √† la liste
            case_vide = random.choice(cases_vides) # Choisit une case vide au hasard
            self.emplacement_x, self.emplacement_y = case_vide # Met √† jour les coordonn√©es du requin
            return False # Indique qu'aucun poisson n'a √©t√© mang√©
        

    def manger_poisson(self, poisson: "Poisson", liste_animaux: list ["Requin", "Poisson"]) -> bool :
        """
        Permet au requin de manger un poisson, augmentant ainsi son niveau d'√©nergie.

        Cette m√©thode augmente l'√©nergie du requin de 1 point lorsqu'il mange un poisson et le retire de la liste des animaux pr√©sents dans l'environnement. Cela simule l'action de chasse et de consommation de proies par le requin.

        Args:
        poisson (Poisson): L'objet poisson que le requin va manger.
        liste_animaux (list): La liste des animaux pr√©sents dans l'environnement.
        """
        config = configparser.ConfigParser() # Cr√©e un parser pour lire les param√®tres
        config.read("parametre.ini") # Lit le fichier de configuration
        # Augmente l'√©nergie en mangeant un poisson
        energie_gagnee = int(config["main"]["gain_energie_par_poisson"]) # R√©cup√®re la valeur d'√©nergie gagn√©e
        self.energie += energie_gagnee # Met √† jour l'√©nergie du requin
        liste_animaux.remove(poisson)  # Retire le poisson de la liste des animaux
        return True # Indique que le poisson a √©t√© mang√©


    def mourir(self, liste_animaux: list) -> bool :
        """
        Supprime le requin de la liste des animaux s'il n'a plus d'√©nergie.

        Cette m√©thode v√©rifie si l'√©nergie du requin est inf√©rieure ou √©gale √† z√©ro et, si c'est le cas, le retire de la liste des animaux pr√©sents dans l'environnement. Cela simule la mort du requin en raison de l'√©puisement de son √©nergie.

        Args:
        liste_animaux (list): La liste des animaux pr√©sents dans l'environnement.
        """
        # Supprime le requin de la liste s'il n'a plus d'√©nergie
        if self.energie <= 0:
            liste_animaux.remove(self) # Retire le requin de la liste
            return True # Indique que le requin est mort
        return False # Indique que le requin est toujours en vie


    def reproduction_requin(self, liste_animaux: list["Requin", "Poisson"]) -> bool :
        """
        G√®re la reproduction du requin en fonction des conditions √©tablies.

        Cette m√©thode v√©rifie si le requin a atteint le nombre requis de chronons de reproduction et s'il a chang√© d'emplacement. Si ces conditions sont remplies, un nouveau requin est cr√©√© √† l'ancienne position et ajout√© √† la liste des animaux, et le compteur de reproduction est r√©initialis√©.

        Args:
        liste_animaux (list): La liste des animaux pr√©sents dans l'environnement.
        """
        # V√©rifie les conditions de reproduction
        if self.chronons_reproduction >= self.temps_reproduction_requin and [self.emplacement_x, self.emplacement_y] != self.ancien_emplacement :
            x_nouveau = self.ancien_emplacement[0] # Coordonn√©e x de l'ancien emplacement
            y_nouveau = self.ancien_emplacement[1] # Coordonn√©e y de l'ancien emplacement
            # Cr√©e un nouveau requin et l'ajoute √† la population
            nouveau_requin = Requin(x_nouveau, y_nouveau, self.temps_reproduction_requin, self.energie)
            liste_animaux.append(nouveau_requin) # Ajoute le nouveau requin √† la liste
            # R√©initialise le compteur de reproduction
            self.chronons_reproduction = 0
            return True # Indique que la reproduction a eu lieu
        return False # Indique que la reproduction n'a pas eu lieu


    def __str__(self):
        """
        Renvoie une repr√©sentation en cha√Æne de caract√®res du requin.

        Cette m√©thode retourne un emoji repr√©sentant le requin, permettant ainsi d'afficher une version visuelle de l'objet dans les interfaces utilisateur ou les journaux.

        Returns:
        str: Une cha√Æne de caract√®res contenant l'emoji du requin.
        """
        return " ü¶à "  # Repr√©sentation textuelle du requin


if __name__ == "__main__": 
    requin1 = Requin(3, 3, 5, 6)
    print(requin1) 

